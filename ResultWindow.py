
#====================================================================================================
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
#====================================================================================================

import PDDL.solutionCleaner as sc
from ctypes import windll
from time import gmtime, strftime

from tkinter import INSERT, Spinbox, Tk, Canvas, Button, PhotoImage, scrolledtext

from WindowArrows import WindowArrows
windll.shcore.SetProcessDpiAwareness(1)

#====================================================================================================

class ResultWindow:
    
    #====================================================================================================

    def __init__(self, result, time_e) -> None:
        window = Tk()
        self.result = result
        try:
            self.result.reverse()
        except Exception:
            pass
        #center
        w = 1024
        h = 768
        ws = window.winfo_screenwidth()
        hs = window.winfo_screenheight()
        x = (ws/2) - (w/2)
        y = (hs/2) - (h/2)
        print(w, h, x, y)
        window.geometry('%dx%d+%d+%d' % (w, h, x, y))
        window.configure(bg = "#FF792E")
        self.num_moves = 0 

        try:
            for node in result:
                if(not node.action.isnull()):
                    self.num_moves+= 1

            s = f"Numero di Mosse: {self.num_moves}\n"

            for i in range(1,len(self.result)):
                s += self.result[i].action.toString()+"\n"

            s = s.replace("1 --> 1\n", "")
        except Exception:
            self.num_moves = "PDDL"
            if "PDDLMulti" not in self.result:
                s = sc.cleanSolution(self.result) 
            else:
                s = sc.cleanSolution(self.result) 
        
        self.offset=0
        self.offset2=0

        if(self.num_moves == "PDDL"):
            self.offset=150
            self.offset2=7


        self.initializer(window, s, time_e)

    #====================================================================================================

    """
        Method that call WindowArrows when the button is pressed.
    """
    def buttonEvent1(self):
        WindowArrows(self.result,int(self.s1.get()))

    #====================================================================================================

    def initializer(self, window, result, time_e):
        canvas = Canvas(
        window,
        bg = "#FF792E",
        height = 768,
        width = 1024,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        canvas.create_rectangle(
        0,
        113.0,
        1108.0,
        735.0,
        fill="#FCFCFC",
        outline="")

        if(self.num_moves!="PDDL"):
            button_image_1 = PhotoImage(
            file="search\\build0\\assets\\frame2\\button_1.png")
            button_1 = Button(
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=self.buttonEvent1,
            relief="flat"
            )
            button_1.place(
            x=283.0,
            y=637.0,
            width=456.0,
            height=55.0
            )

            self.s1 = Spinbox(window, from_=0, to=(self.num_moves), width=7)
            self.s1.place(x=45.0, y=570.0, anchor='nw')

            canvas.create_text(
            29.0,
            520.0,
            anchor="nw",
            text="Viewer: (choose the state number)",
            fill="#505485",
            font=("", 16 * -1,"bold")
            )

            canvas.create_rectangle(
            29.0,
            559.0,
            995.0,
            608.0,
            fill="#D9D9D9",
            outline="")

        

        canvas.create_text(
        27.0,
        30,
        anchor="nw",
        text="Result Search in Data: "+strftime("%Y-%m-%d %H:%M:%S", gmtime()),
        fill="#FCFCFC",
        font=("", 26 * -1,"bold")
        )

        canvas.create_rectangle(
        29.0,
        180.0,
        995.0,
        384.0+self.offset,
        fill="#D9D9D9",
        outline="")

        canvas.create_text(
        27.0,
        141.0,
        anchor="nw",
        text="Solution:",
        fill="#505485",
        font=("", 16 * -1,"bold")
        )

        canvas.create_text(
        29.0,
        406.0+self.offset,
        anchor="nw",
        text="Total Run Time:",
        fill="#505485",
        font=("", 16 * -1,"bold")
        )

        t = scrolledtext.ScrolledText(window, height=8+self.offset2, width=90)
        t.insert(INSERT, str(result))
        t.place(x=45.0, y=191.0, anchor='nw')

        canvas.create_rectangle(
        29.0,
        445.0+self.offset,
        995.0,
        494.0+self.offset,
        fill="#D9D9D9",
        outline="")

        canvas.create_text(
        45.0,
        456.0+self.offset,
        anchor="nw",
        text=time_e,
        fill="#505485",
        font=("", 16 * -1)
        )

        canvas.create_rectangle(
        27.0,
        69.0,
        87.0,
        74.0,
        fill="#FCFCFC",
        outline="")
        window.resizable(False, False)
        window.mainloop()

#====================================================================================================