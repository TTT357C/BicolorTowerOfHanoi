
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from ctypes import windll
from datetime import datetime

from tkinter import Tk, Canvas
windll.shcore.SetProcessDpiAwareness(1)

class WaitingWindow:
    
    """
        This window is only for showing the user the time that has elapsed
    """
    def __init__(self):
        self.window = Tk()
        self.window.configure(bg = "#FF792E")
        self.window.overrideredirect(True)
        #center
        w = 1024
        h = 350
        ws = self.window.winfo_screenwidth()
        hs = self.window.winfo_screenheight()
        x = (ws/2) - (w/2)
        y = (hs/2) - (h/2)
        print(w, h, x, y)
        self.window.geometry('%dx%d+%d+%d' % (w, h, x, y))
        
        self.window.resizable(False, False)
        Cr.time = datetime.now()
        self.window.after(100, self.update_all)
        self.window.mainloop()


    def all_window(self, window, spinner, quote, au, el):
        #clear
        for widgets in window.winfo_children():
            widgets.destroy()

        
        canvas = Canvas(
        window,
        bg = "#FF792E",
        height = 350,
        width = 1024,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        canvas.create_text(
        23.0,
        120.0,
        anchor="nw",
        text="Towers of Hanoi solver",
        fill="#FCFCFC",
        font=("", 26 * -1,"bold")
        )

        canvas.create_rectangle(
        27.0,
        160.0,
        87.0,
        165.0,
        fill="#FCFCFC",
        outline="")

        canvas.create_rectangle(
        374.0,
        0,
        1024.0,
        433.0,
        fill="#FF9E66",
        outline="")

        canvas.create_rectangle(
        490.0,
        38,
        930.0,
        134.0,
        fill="#FCFCFC",
        outline="")

        canvas.create_rectangle(
        490.0,
        38,
        575.0,
        134.0,
        fill="#FF792E",
        outline="")

        canvas.create_text(
        510.0,
        75.0,
        anchor="nw",
        text="TIME",
        fill="#FCFCFC",
        font=("", 18 * -1,"bold")
        )

        canvas.create_text(
        30.0,
        175.0,
        anchor="nw",
        text="It can take some time",
        fill="#FCFCFC",
        font=("", 16 * -1)
        )

        canvas.create_text(
        440.0,
        285.0,
        anchor="nw",
        text = quote,
        fill="#FCFCFC",
        font=("", 15 * -1)
        )

        canvas.create_text(
        600,
        56,
        anchor="nw",
        text = el,
        fill="#505485",
        font=("", 55 * -1,"bold")
        )

        
        canvas.create_text(
        520.0,
        150.0,
        anchor="nw",
        text = spinner,
        fill = "#FCFCFC",
        font=("", 106 * -1)
        )   

        canvas.create_text(
        450,
        309.0,
        anchor="nw",
        text=au,
        fill="#FCFCFC",
        font=("", 14 * -1,"bold")
        )

    def update_all(self):

        elapsed = datetime.now() - Cr.time

        self.all_window(
            self.window,
            Cr.ascii_spinner[Cr.cont],
            Cr.quotes[Cr.cont2],
            Cr.autors[Cr.cont2],
            f"{str(elapsed.seconds)}.{str(elapsed.microseconds)[:3]}",
        )
        Cr.cont += 1

        if(Cr.cont1 == 8):
            Cr.cont2 += 1
            Cr.cont1 = 0

        if(Cr.cont == len(Cr.ascii_spinner)):
            Cr.cont = 0
            Cr.ascii_spinner.reverse()
            Cr.cont1 += 1

        if(Cr.cont2 == len(Cr.autors)):
            Cr.cont2 = 0

        self.window.after(100, self.update_all)

class Cr:
    ascii_spinner = [
        "▪▫▫▫▫▫▫▫▫▫",
        "▫▪▫▫▫▫▫▫▫▫",
        "▫▫▪▫▫▫▫▫▫▫",
        "▫▫▫▪▫▫▫▫▫▫",
        "▫▫▫▫▪▫▫▫▫▫",
        "▫▫▫▫▫▪▫▫▫▫",
        "▫▫▫▫▫▫▪▫▫▫",
        "▫▫▫▫▫▫▫▪▫▫",
        "▫▫▫▫▫▫▫▫▪▫",
        "▫▫▫▫▫▫▫▫▫▪"]
    quotes = [
        "“Patience is not simply the ability to wait – it’s how we behave while we’re waiting.”",
        "“I'm calculating an answer”",
        "“Patience is the road to wisdom.”",
        "“Patience is the best remedy for every trouble.”",
        "“I am a slow walker, but I never walk back.”"]
    autors = [
        "Joyce Meyer",
        "System",
        "Kao Kalia Yang",
        "Plautus",
        "Abraham Lincoln"]
    cont = 0
    cont1 = 0
    cont2 = 0
    time = 0
        



